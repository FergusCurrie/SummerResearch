
while non_terminated:
	    check termination

	    # Mating
		until enough offspring created:
		    init empty offspring
			until have enough offspring:
				binary tournament selection
				    resulting array of parents index chosen for mating
				SimulatedBinaryCrossover <- parents_index, prob_per_var=1
                    crossover on parents_index generated in tournament selection
                    X : resulting array = (2,num_mating,num_decision_vars)
                    create a mask : 'do_crossover' (num_mating,num_decision_vars) filled with True/False, True proportional to prob_per_var
                                    AND False is x[0] , x[1] are too close together
                    calculate a simulated binary cross, using randomness, between the two points (refer to distribution)
                    apply the mask so that only a proportion of mating pairs has crossover applied to
                        creates new population _X
				do PolynomialMutation on : population with prob= prob of mutation and eta=degree polynomial, problem XL & XU
                    with array of individuals -> e.g. [  [[0.1],[0.2],[0.3]] , [[0.7],[0.8],[0.9]]  ] (3D) ()
                    apply a mask so that only a proportion (relative to $prob) will keep the following mutation:
                        _Y = apply_polynomial(X) -> (refer to distribution_polynomial)
                        (_Y => array with same shape as X with rand half using first mutation, other half using second mutation)
                    Y[only masks based on $prob] = put_in_bounds(_Y)
                    return Y
				eliminate_duplicates
				randomly cull if too large
				merge to offspring
			return offspring
		evaluate offspring
		merge population with offspring

		# Survival
		do survival selection
			based on constraint sort pop into feasible and unfeasible
			for feasible solutions do  RankAndCrowdingSurvival(fixed for nsga2)
			    init empty survivors
    			    get fronts with non-dominated sort
			    for each front
			        calculate crowding distance
			        if size of (survivors + front) > n_survive
			            add individual in until == n_survive, ascending order of crowding distance
			        else
			            add the whole front, ascending order of crowding distance
			    return survivors
		set population to survivors






# This will work fine for our data!
PolynomialMutation <- pop (population from crossover)


do apply_polynomial:
    using a second mask:
            to half apply this:
                delta2 = XU - X / XU - XL
                deltaq2 = 2 * 1-rand + 2 * (rand-0.5) * (1 - delta1)^eta+1
                _Y = x + deltaq * (XU - XL)
            to the other half apply this:
                delta1 = X - XL / XU - XL
                deltaq1 = 2*rand + 1 - 2*rand * (1 - delta1)^eta+1
                _Y = x + deltaq * (XU - XL)











